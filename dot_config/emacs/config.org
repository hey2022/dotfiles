#+title: Emacs Config
#+author: Yiheng He
#+property: header-args:emacs-lisp :tangle init.el
#+begin_src emacs-lisp :exports none
  ;; DO NOT EDIT THIS FILE DIRECTLY
  ;; This is a file generated from config.org with org babel tangle
#+end_src

* Setup package manager
~straight.el~ is a package manager for emacs that can use git repositories as well

Bootstrap ~straight.el~
#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 6))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
  	(url-retrieve-synchronously
  	 "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
  	 'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+end_src

** ~use-package~ intergration
~use-package~ is a package that simplifies your emacs configuration

Install ~use-package~
#+begin_src emacs-lisp
  (straight-use-package 'use-package)
#+end_src

Make ~use-package~ use ~straight.el~ by default
#+begin_src emacs-lisp
  (setq straight-use-package-by-default t)
#+end_src

Set ~use-package~ to verbose so that we can see which packages are impacting performance.
#+begin_src emacs-lisp
  (setq use-package-verbose t)
#+end_src

** Disable ~package.el~ from loading
Since ~straight.el~ conflicts with ~package.el~, we will need to disable it from loading.
#+begin_src emacs-lisp :tangle early-init.el
  (setq package-enable-at-startup nil)
#+end_src
* Emacs Settings
** Minibuffer history
Turns on minibuffer history
#+begin_src emacs-lisp
  (setq history-length 25)
  (savehist-mode)
#+end_src

** Save place in file
#+begin_src emacs-lisp
  (save-place-mode)
#+end_src
** Automatically update buffer
Turn on automatic buffer updates
#+begin_src emacs-lisp
  (global-auto-revert-mode)
  (setq global-auto-revert-non-file-buffers t)
#+end_src

** Change custom file location
This will change the custom file location so it won't pollute init.el
#+begin_src emacs-lisp
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (load custom-file 'noerror 'nomessage)
#+end_src
* UI
** Theme
Use the catppuccin mocha theme
#+begin_src emacs-lisp
  (use-package catppuccin-theme
    :init (load-theme 'catppuccin t))
#+end_src
 
** Cleaner interface
This removes
- menu bar
- tool bar
- scroll bar
#+begin_src emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (add-to-list 'default-frame-alist
               '(vertical-scroll-bars . nil))
#+end_src

Prevent UI prompts
#+begin_src emacs-lisp
  (setq use-dialog-box nil)
#+end_src

** Line numbers
Absolute and relative line numbers
#+begin_src emacs-lisp
  (global-display-line-numbers-mode)
  (setq display-line-numbers-type 'relative)
#+end_src

** Modeline
#+begin_src emacs-lisp
  (use-package doom-modeline
    :init (doom-modeline-mode))
#+end_src

** Font
Sets the font to Fantasque Sans Mono
#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist '(font . "JetBrains Mono"))
#+end_src

Install extra icons for emacs
#+begin_src emacs-lisp
  (use-package all-the-icons
    :if (display-graphic-p))
#+end_src

*** Ligatures
This will configure ligatures for ~JetBrains Mono~ with emacs
#+begin_src emacs-lisp
  (use-package ligature
    :load-path "path-to-ligature-repo"
    :config
    ;; Enable all JetBrains Mono ligatures in programming modes
    (ligature-set-ligatures 'prog-mode '("-|" "-~" "---" "-<<" "-<" "--" "->" "->>" "-->" "///" "/=" "/=="
                                         "/>" "//" "/*" "*>" "***" "*/" "<-" "<<-" "<=>" "<=" "<|" "<||"
                                         "<|||" "<|>" "<:" "<>" "<-<" "<<<" "<==" "<<=" "<=<" "<==>" "<-|"
                                         "<<" "<~>" "<=|" "<~~" "<~" "<$>" "<$" "<+>" "<+" "</>" "</" "<*"
                                         "<*>" "<->" "<!--" ":>" ":<" ":::" "::" ":?" ":?>" ":=" "::=" "=>>"
                                         "==>" "=/=" "=!=" "=>" "===" "=:=" "==" "!==" "!!" "!=" ">]" ">:"
                                         ">>-" ">>=" ">=>" ">>>" ">-" ">=" "&&&" "&&" "|||>" "||>" "|>" "|]"
                                         "|}" "|=>" "|->" "|=" "||-" "|-" "||=" "||" ".." ".?" ".=" ".-" "..<"
                                         "..." "+++" "+>" "++" "[||]" "[<" "[|" "{|" "??" "?." "?=" "?:" "##"
                                         "###" "####" "#[" "#{" "#=" "#!" "#:" "#_(" "#_" "#?" "#(" ";;" "_|_"
                                         "__" "~~" "~~>" "~>" "~-" "~@" "$>" "^=" "]#"))
    ;; Enables ligature checks globally in all buffers. You can also do it
    ;; per mode with `ligature-mode'.
    (global-ligature-mode))
#+end_src

** Visible bell
Turns on visible bell
#+begin_src emacs-lisp
  (setq visible-bell t)
#+end_src

** Dashboard
Setup dashboard and fix dashboard for client server setup
#+begin_src emacs-lisp
  (use-package dashboard
    :custom (initial-buffer-choice (lambda () (get-buffer-create "*dashboard*")))
    :config (dashboard-setup-startup-hook))
#+end_src

** which-key
Install ~which-key~
#+begin_src emacs-lisp
  (use-package which-key
    :config (which-key-mode))
#+end_src

* Editing
** expand-region.el
#+begin_src emacs-lisp
  (use-package expand-region
    :bind ("C-=" . er/expand-region))
#+end_src

** Autopairs
Automatically insert pairs with ~smartparens~
#+begin_src emacs-lisp
  (use-package smartparens
    :config
    (require 'smartparens-config)
    (smartparens-global-mode))
#+end_src

* Navigation
** Windows
Move quickly between windows with ~ace-window~
#+begin_src emacs-lisp
  (use-package ace-window
    :bind ("M-o" . ace-window))
#+end_src
* Interfaces
*** Magit
~magit~ is a git interface fit for gods

Install ~magit~
#+begin_src emacs-lisp
  (use-package magit
    :commands magit)
#+end_src
*** Terminal
~vterm~ is a better terminal than the builtin terminals
#+begin_src emacs-lisp
  (use-package vterm
    ;; Disable line numbers in vterm
    :commands vterm
    :config (add-hook 'vterm-mode-hook (lambda () (display-line-numbers-mode -1))) 
    :custom
    (vterm-timer-delay 0.01)
    (vterm-max-scrollback 100000))
#+end_src

Setup $PATH for ~vterm~
#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :after vterm
    :config
    (when (daemonp)
      (exec-path-from-shell-initialize)))
#+end_src

*** Projectile
#+begin_src emacs-lisp
  (use-package projectile
    :bind ("C-c p" . projectile-command-map)
    :config (projectile-mode))
#+end_src

* Completion
** LSP
Install lsp-mode
#+begin_src emacs-lisp
  ;; (use-package lsp-mode)
#+end_src

** Corfu
Use the Corfu in buffer completion popup
#+begin_src emacs-lisp
  (use-package corfu
    ;; Optional
    :custom
    ;; (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
    (corfu-auto t)                    ;; Enable auto completion
    ;; (corfu-separator ?\s)          ;; Orderless field separator
    ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
    ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
    ;; (corfu-preview-current nil)    ;; Disable current candidate preview
    ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
    ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
    ;; (corfu-scroll-margin 5)        ;; Use scroll margin

    ;; Enable Corfu only for certain modes.
    ;; :hook ((prog-mode . corfu-mode)
    ;;        (shell-mode . corfu-mode)
    ;;        (eshell-mode . corfu-mode))

    ;; Recommended: Enable Corfu globally.
    ;; This is recommended since Dabbrev can be used globally (M-/).
    ;; See also `corfu-exclude-modes'.
    :init (global-corfu-mode))
#+end_src
** Vertico
Use ~vertico~ completion UI
#+begin_src emacs-lisp
  (use-package vertico
    :init (vertico-mode))
#+end_src
** Marginalia
Install ~marginalia~
#+begin_src emacs-lisp
  (use-package marginalia
    ;; Bind `marginalia-cycle' locally in the minibuffer.  To make the binding
    ;; available in the *Completions* buffer, add it to the
    ;; `completion-list-mode-map'.
    :bind
    (:map minibuffer-local-map
          ("M-A" . marginalia-cycle))
    :init (marginalia-mode))
#+end_src

** Orderless
Fuzzy matcher
#+begin_src emacs-lisp
  (use-package orderless
    :after vertico
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src

* Org Mode
** org
The version of org builtin into emacs is outdated, so we will get org from elpa
#+begin_src emacs-lisp
    (use-package org
      :hook org-mode)
#+end_src

** org-bullets
#+begin_src emacs-lisp
  (use-package org-bullets
    :hook (org-mode . org-bullets-mode))
#+end_src

** Indent
Make orgmode automatically indent
#+begin_src emacs-lisp
  (setq org-startup-indented t)
#+end_src

** Hide markers
Hide emphasis markers
#+begin_src emacs-lisp
  (setq org-hide-emphasis-markers t)
#+end_src

* Languages
** Common Lisp
Sly is a way for emacs to interact with ~SBCL~ and run and compile code
Install ~sly~
#+begin_src emacs-lisp
  (use-package sly
    :commands sly)
#+end_src
