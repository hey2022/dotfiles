#+title: DOOM Emacs Config
#+author: Yiheng He

* Core
** Fuzzy Find
#+begin_src emacs-lisp
(use-package! affe
  :config
  (setq affe-find-command "fd -t file -H")
  (map! :map doom-leader-file-map
   :desc "Fuzzy Find" "F" #'affe-find
   :desc "Fuzzy Find Home" "h" (lambda () (interactive) (affe-find "~"))))
#+end_src

** Change Directory
#+begin_src emacs-lisp
(map!
 :map doom-leader-file-map
 "z" #'cd)
#+end_src

* User Interface
** Font
Sets font to a custom build of Iosevka using https://typeof.net/Iosevka/customizer
#+begin_src emacs-lisp
(setq doom-font (font-spec :family "Iosevka Custom" :size 16))
(setq doom-variable-pitch-font (font-spec :family "Iosevka Proportional Custom" :size 16))
#+end_src

** Theme
Sets the theme to tokyo night
#+begin_src emacs-lisp
(setq doom-theme 'doom-one)
#+end_src

** Transparency
#+begin_src emacs-lisp
(set-frame-parameter nil 'alpha-background 90)

(add-to-list 'default-frame-alist '(alpha-background . 90))
#+end_src

** Line numbers
#+begin_src emacs-lisp
(setq display-line-numbers-type `relative)
#+end_src

** Prevent Emacs client from creating new workspace
#+begin_src emacs-lisp
(after! persp-mode
  (setq persp-emacsclient-init-frame-behaviour-override "main"))
#+end_src

** Fix tabs
#+begin_src emacs-lisp
(after! centaur-tabs
  (setq centaur-tabs-set-bar 'right))
#+end_src

* Org
#+begin_src emacs-lisp
(after! org
  (setq org-directory "~/org/")
  (setq org-agenda-files '("~/org/personal.org" "~/school/school.org")))
#+end_src
** Latex Preview
*** Latex Preview Startup
#+begin_src emacs-lisp
(after! org
  (setq org-startup-with-latex-preview t))
#+end_src

*** Fragtog
#+begin_src emacs-lisp
(use-package! org-fragtog
  :hook
  (org-mode . org-fragtog-mode))
#+end_src

** Latex Headers
*** siunitx
#+begin_src emacs-lisp
(after! org
  (add-to-list 'org-latex-packages-alist '("per-mode=fraction" "siunitx" t)))
#+end_src

*** minted
#+begin_src emacs-lisp
(setq org-latex-listings 'minted
      org-latex-packages-alist '(("" "minted"))
      org-latex-pdf-process
      '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
#+end_src

** Org Roam
Remove file creation date from the capture template
#+begin_src emacs-lisp
(after! org-roam
  (setq org-roam-capture-templates
        '(("d" "default" plain "%?" :target
           (file+head "${slug}.org" "#+title: ${title}\n")
           :unnarrowed t))))
#+end_src

*** Org Roam UI
#+begin_src emacs-lisp
(use-package! websocket
  :after org-roam)

(use-package! org-roam-ui
  :after org-roam
  :bind (:map doom-leader-notes-map
              ("r u" . org-roam-ui-mode))
  :custom
  (org-roam-ui-sync-theme t)
  (org-roam-ui-follow t)
  (org-roam-ui-update-on-save t)
  (org-roam-ui-open-on-start t))
#+end_src

** Org agenda
#+begin_src emacs-lisp
(after! org
  (setq cycle-date '((5 6 2024) 1))

  (defun school-timetable (date day)
    (= (school-cycle-day date) day))

  (defun school-cycle-day (date)
    (if (weekdayp date)
        (+ (% (+ (- (nth 1 cycle-date) 1) (weekdays-since (nth 0 cycle-date) date)) 6) 1)
      0))

  (defun weekdays-since (start-date end-date)
    (let ((weekdays 0))
      (dotimes (i (- (calendar-absolute-from-gregorian end-date)
                     (calendar-absolute-from-gregorian start-date)))
        (let ((current-date (calendar-gregorian-from-absolute (+ (calendar-absolute-from-gregorian start-date) i))))
          (when (weekdayp current-date)
            (setq weekdays (+ weekdays 1)))))
      weekdays))

  (defun weekdayp (date)
    (memq (calendar-day-of-week date) '(1 2 3 4 5))))
#+end_src

*** Timeblock
#+begin_src emacs-lisp
(use-package! org-timeblock
  :config
  (evil-define-key 'normal org-timeblock-mode-map "q" #'org-timeblock-quit)
  (evil-define-key 'normal org-timeblock-mode-map "l" #'org-timeblock-day-later)
  (evil-define-key 'normal org-timeblock-mode-map "h" #'org-timeblock-day-earlier)
  (evil-define-key 'normal org-timeblock-mode-map "j" #'org-timeblock-jump-to-day)
  (evil-define-key 'normal org-timeblock-mode-map "v" #'org-timeblock-change-span)
  (evil-define-key 'normal org-timeblock-mode-map "s" #'org-timeblock-schedule)
  (evil-define-key 'normal org-timeblock-mode-map "d" #'org-timeblock-set-duration)
  (evil-define-key 'normal org-timeblock-mode-map "m" #'org-timeblock-mark-block)
  (evil-define-key 'normal org-timeblock-mode-map "u" #'org-timeblock-unmark-block)
  (evil-define-key 'normal org-timeblock-mode-map "U" #'org-timeblock-unmark-all-blocks)
  (evil-define-key 'normal org-timeblock-mode-map "+" #'org-timeblock-new-task)
  :custom
  (org-timeblock-show-future-repeats t)
  :bind
  (:map doom-leader-open-map
        ("a b" . org-timeblock)))
#+end_src

** Org Auto Export
#+begin_src emacs-lisp
(after! org
  (defun org-export-on-save (export-method)
    "Export org when saving current buffer."
    (when (not (eq major-mode 'org-mode))
      (error "Not an org-mode file!"))
    (if (memq export-method after-save-hook)
        (progn (remove-hook 'after-save-hook export-method t)
               (message "Disabled export on save"))
      (add-hook 'after-save-hook export-method nil t)
      (message "Enabled export on save")))

  (defun org-export-pdf-on-save ()
    "Export org to pdf on save"
    (interactive)
    (org-export-on-save (lambda () (org-latex-export-to-pdf t))))

  (defun org-export-html-on-save ()
    "Export org to html on save"
    (interactive)
    (org-export-on-save 'org-html-export-to-html)))
#+end_src
** Smartparens
#+begin_src emacs-lisp
(after! org
  (sp-local-pair 'org-mode "\\[" "\\]"))
#+end_src

** Transclusion
#+begin_src emacs-lisp
(use-package! org-transclusion
  :after org
  :hook
  (org-mode . org-transclusion-mode)
  (org-mode . (lambda () (add-hook! after-save #'org-transclusion-add-all)))
  :init
  (map!
   :map doom-leader-notes-map
   :desc "Org Transclusion Mode" "t" #'org-transclusion-mode))
#+end_src
** Org Habit
#+begin_src emacs-lisp
(add-to-list 'org-modules 'org-habit)
#+end_src
** Journal
#+begin_src emacs-lisp
(use-package! org-journal
  :init
  (add-hook! org-journal-mode (setq auto-save-default nil))
  (add-hook! org-journal-mode (setq-local undo-tree-auto-save-history nil))
  :config
  (setq org-journal-enable-encryption t))
#+end_src
** Auto Tangle
#+begin_src emacs-lisp
(use-package org-auto-tangle
  :hook (org-mode . org-auto-tangle-mode))
#+end_src
** Org Modern
#+begin_src emacs-lisp
(use-package org
  :hook (org-mode . org-modern-mode)
  :hook (org-agenda-finalize . org-modern-agenda))
#+end_src
* Writing
** Language Tool
#+begin_src emacs-lisp
(after! langtool
  (setq langtool-default-language "en-GB"))
#+end_src
* Programming
** LSP Mode
*** Inlay Hints
#+begin_src emacs-lisp
(after! lsp-mode
  (setq lsp-inlay-hint-enable t))
#+end_src
