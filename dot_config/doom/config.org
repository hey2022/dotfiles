#+title: DOOM Emacs Config
#+author: Yiheng He

* Core
** Fish Shell
#+begin_src emacs-lisp
(setq shell-file-name (executable-find "bash"))
(setq-default vterm-shell (executable-find "fish"))
(setq-default explicit-shell-file-name (executable-find "fish"))
#+end_src
* User Interface
** Font
Sets the font to =JetBrains Mono= because I liked it the most when tested on the website https://www.codingfont.com/
#+begin_src emacs-lisp
(setq doom-font (font-spec :family "JetBrains Mono" :size 13))
#+end_src

** Theme
Sets the theme to tokyo night
#+begin_src emacs-lisp
(setq doom-theme 'doom-tokyo-night)
#+end_src

** Transparency
#+begin_src emacs-lisp
(set-frame-parameter nil 'alpha-background 75)

(add-to-list 'default-frame-alist '(alpha-background . 75))
#+end_src

** Line numbers
#+begin_src emacs-lisp
(setq display-line-numbers-type `relative)
#+end_src

** Prevent Emacs client from creating new workspace
#+begin_src emacs-lisp
(after! persp-mode
  (setq persp-emacsclient-init-frame-behaviour-override "main"))
#+end_src

** Fix tabs
#+begin_src emacs-lisp
(after! centaur-tabs
  (setq centaur-tabs-set-bar 'right))
#+end_src

* Org
#+begin_src emacs-lisp
(after! org
  (setq org-directory "~/org/")
  (setq org-agenda-files '("~/org/personal.org" "~/school/school.org")))
#+end_src
** Latex Preview
*** Latex Preview Startup
#+begin_src emacs-lisp
(after! org
  (setq org-startup-with-latex-preview t))
#+end_src
*** Fragtog
#+begin_src emacs-lisp
(add-hook! org-mode 'org-fragtog-mode)
#+end_src

** CDLaTex
Disable company-mode in org mode documents to prevent conflicts with CDLaTex.
#+begin_src emacs-lisp
(add-hook! org-mode (lambda () (company-mode -1)))
#+end_src

** Latex Headers
#+begin_src emacs-lisp
(after! org
  (add-to-list 'org-latex-packages-alist '("per-mode=fraction" "siunitx" t)))
#+end_src

** Org Roam
#+begin_src emacs-lisp
(use-package! websocket
  :after org-roam)

(use-package! org-roam-ui
  :after org-roam
  :config
  (setq org-roam-ui-sync-theme t
        org-roam-ui-follow t
        org-roam-ui-update-on-save t
        org-roam-ui-open-on-start t))
#+end_src

** Org agenda
#+begin_src emacs-lisp
(after! org
   (setq cycle-date '((2 21 2024) 1))

  (defun school-timetable (date day)
    (= (school-cycle-day date) day))

  (defun school-cycle-day (date)
    (if (weekdayp date)
        (+ (% (+ (- (nth 1 cycle-date) 1) (weekdays-since (nth 0 cycle-date) date)) 6) 1)
      0))

  (defun weekdays-since (start-date end-date)
    (let ((weekdays 0))
      (dotimes (i (- (calendar-absolute-from-gregorian end-date)
                     (calendar-absolute-from-gregorian start-date)))
        (let ((current-date (calendar-gregorian-from-absolute (+ (calendar-absolute-from-gregorian start-date) i))))
          (when (weekdayp current-date)
            (setq weekdays (+ weekdays 1)))))
      weekdays))

  (defun weekdayp (date)
    (memq (calendar-day-of-week date) '(1 2 3 4 5))))
#+end_src

** Org Auto Export
#+begin_src emacs-lisp
(after! org
   (defun org-export-on-save (export-method)
     "Export org when saving current buffer."
     (when (not (eq major-mode 'org-mode))
       (error "Not an org-mode file!"))
     (if (memq export-method after-save-hook)
         (progn (remove-hook 'after-save-hook export-method t)
                (message "Disabled export on save"))
       (add-hook 'after-save-hook export-method nil t)
       (message "Enabled export on save")))

  (defun org-export-pdf-on-save ()
    "Export org to pdf on save"
    (interactive)
    (org-export-on-save (lambda () (org-latex-export-to-pdf t))))

  (defun org-export-html-on-save ()
    "Export org to html on save"
    (interactive)
    (org-export-on-save 'org-html-export-to-html)))
#+end_src
** Smartparens
#+begin_src emacs-lisp
(after! org
   (sp-local-pair 'org-mode "\\[" "\\]"))
#+end_src
