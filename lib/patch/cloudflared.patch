diff --git c/maintainers/maintainer-list.nix w/maintainers/maintainer-list.nix
index 50888cbe5111..828dcbdf963c 100644
--- c/maintainers/maintainer-list.nix
+++ w/maintainers/maintainer-list.nix
@@ -3479,6 +3479,12 @@
     github = "bmwalters";
     githubId = 4380777;
   };
+  bn = {
+    github = "bn-c";
+    githubId = 149229524;
+    name = "Bach Nguyen";
+    email = "root.bachnc@gmail.com";
+  };
   bnlrnz = {
     github = "bnlrnz";
     githubId = 11310385;
@@ -10126,6 +10132,14 @@
     githubId = 47456195;
     name = "hexclover";
   };
+  hey2022 = {
+    name = "Yiheng He";
+    email = "yiheng.he@proton.me";
+    matrix = "@hey2022:matrix.org";
+    github = "hey2022";
+    githubId = 48553457;
+    keys = [ { fingerprint = "128E 09C0 6F73 D678 6BB5  E551 5EA5 3C75 F7BE 3EDE"; } ];
+  };
   heyimnova = {
     email = "git@heyimnova.dev";
     github = "heyimnova";
diff --git c/nixos/modules/services/networking/cloudflared.nix w/nixos/modules/services/networking/cloudflared.nix
index 0a6a09dabf2b..cc1f3bc024e0 100644
--- c/nixos/modules/services/networking/cloudflared.nix
+++ w/nixos/modules/services/networking/cloudflared.nix
@@ -203,7 +203,8 @@ in
               inherit certificateFile originRequest;
 
               credentialsFile = lib.mkOption {
-                type = lib.types.path;
+                type = with lib.types; nullOr path;
+                default = null;
                 description = ''
                   Credential file.
 
@@ -211,6 +212,48 @@ in
                 '';
               };
 
+              token = lib.mkOption {
+                type = with lib.types; nullOr str;
+                default = null;
+                description = ''
+                  Cloudflare tunnel token to use instead of a configuration file.
+                  If set, the tunnel will be run using `cloudflared tunnel run --token <token>`.
+                  This option is mutually exclusive with the config file-based approach
+                  (which requires `credentialsFile`).
+                  Note: Using a token bypasses locally defined ingress rules and uses
+                  rules configured via the Cloudflare dashboard.
+                '';
+                example = "eyJhIj...zUzZg==";
+              };
+
+              tokenFile = lib.mkOption {
+                type = with lib.types; nullOr path;
+                default = null;
+                description = ''
+                  Cloudflare tunnel tokenFile to use instead of a configuration file.
+                  If set, the tunnel will be run using `cloudflared tunnel run --token-file <tokenFile>`.
+                  This option is mutually exclusive with the config file-based approach
+                  (which requires `credentialsFile`).
+                  Note: Using a tokenFile bypasses locally defined ingress rules and uses
+                  rules configured via the Cloudflare dashboard.
+                '';
+                example = "/path/to/my/token_file";
+              };
+
+              environmentFile = lib.mkOption {
+                type = with lib.types; nullOr path;
+                default = null;
+                example = "/run/secrets/cloudflared.env";
+                description = ''
+                  The environment file Cloudflare tunnel will use, which can be used to set TUNNEL_TOKEN.
+
+                  Tunnel run parameters that can be set through environment variables can be found
+                  [here](https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/configure-tunnels/cloudflared-parameters/run-parameters)
+
+                  The Environment file is as defined in {manpage}`systemd.exec(5)`.
+                '';
+              };
+
               warp-routing = {
                 enabled = lib.mkOption {
                   type = with lib.types; nullOr bool;
@@ -231,6 +274,7 @@ in
                   See `service`.
                 '';
                 example = "http_status:404";
+                default = "http_status:404";
               };
 
               ingress = lib.mkOption {
@@ -298,11 +342,34 @@ in
           };
           default = "http_status:404";
         };
+        # Example for token-based
+        "my-token-tunnel" = {
+          token = "eyJhIj...zUzZg==";
+          # No credentialsFile, default, or ingress needed here
+        };
       };
     };
   };
 
   config = lib.mkIf cfg.enable {
+    warnings = lib.mapAttrsToList (
+      name: tunnel:
+      if tunnel.token != null then
+        "[cloudflared-service | ${name}] Tunnel is using raw token value, which is world-readable!"
+      else
+        ""
+    ) cfg.tunnels;
+
+    assertions = lib.mapAttrsToList (name: tunnel: {
+      assertion =
+        (lib.count (x: !builtins.isNull x) [
+          tunnel.token
+          tunnel.tokenFile
+          tunnel.credentialsFile
+        ]) <= 1;
+      message = "[cloudflared-service | ${name}] You must specify AT MOST ONE of 'token', 'tokenFile', or 'credentialsFile'.";
+    }) cfg.tunnels;
+
     systemd.targets = lib.mapAttrs' (
       name: tunnel:
       lib.nameValuePair "cloudflared-tunnel-${name}" {
@@ -311,7 +378,7 @@ in
         after = [ "cloudflared-tunnel-${name}.service" ];
         unitConfig.StopWhenUnneeded = true;
       }
-    ) config.services.cloudflared.tunnels;
+    ) cfg.tunnels;
 
     systemd.services = lib.mapAttrs' (
       name: tunnel:
@@ -367,22 +434,35 @@ in
         serviceConfig = {
           RuntimeDirectory = "cloudflared-tunnel-${name}";
           RuntimeDirectoryMode = "0400";
-          LoadCredential = [
-            "credentials.json:${tunnel.credentialsFile}"
-          ] ++ (lib.optional (certFile != null) "cert.pem:${certFile}");
+          LoadCredential = lib.concatLists [
+            (lib.optional (tunnel.credentialsFile != null) "credentials.json:${tunnel.credentialsFile}")
+            (lib.optional (tunnel.tokenFile != null) "credentials.json:${tunnel.tokenFile}")
+            (lib.optional (certFile != null) "cert.pem:${certFile}")
+          ];
+          EnvironmentFile = lib.optional (tunnel.environmentFile != null) tunnel.environmentFile;
 
-          ExecStart = "${cfg.package}/bin/cloudflared tunnel --config=${mkConfigFile} --no-autoupdate run";
+          ExecStart =
+            if tunnel.token != null then
+              "${cfg.package}/bin/cloudflared tunnel run --token ${lib.escapeShellArg tunnel.token}"
+            else if tunnel.tokenFile != null then
+              "${cfg.package}/bin/cloudflared tunnel run --token-file /run/credentials/cloudflared-tunnel-${name}.service/credentials.json"
+            else if tunnel.credentialsFile != null then
+              "${cfg.package}/bin/cloudflared tunnel --config=${mkConfigFile} --no-autoupdate run"
+            else
+              "${cfg.package}/bin/cloudflared tunnel run";
           Restart = "on-failure";
           DynamicUser = true;
         };
 
         environment.TUNNEL_ORIGIN_CERT = lib.mkIf (certFile != null) ''%d/cert.pem'';
       }
-    ) config.services.cloudflared.tunnels;
+    ) cfg.tunnels;
   };
 
   meta.maintainers = with lib.maintainers; [
-    bbigras
     anpin
+    bbigras
+    bn
+    hey2022
   ];
 }
