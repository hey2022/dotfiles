#+title: DOOM Emacs Config
#+author: Yiheng He

* Core
** Fuzzy Find
#+begin_src emacs-lisp
(use-package! affe
  :config
  (setq affe-find-command "fd -t file -H")
  (map! :map doom-leader-file-map
   :desc "Fuzzy Find" "F" #'affe-find
   :desc "Fuzzy Find Home" "h" (lambda () (interactive) (affe-find "~"))))
#+end_src

** Change Directory
#+begin_src emacs-lisp
(map!
 :map doom-leader-file-map
 "z" #'cd)
#+end_src

* User Interface
** Font
Sets font to a custom build of Iosevka using https://typeof.net/Iosevka/customizer
#+begin_src emacs-lisp
(setq doom-font (font-spec :family "Iosevka Custom" :size 16))
(setq doom-variable-pitch-font (font-spec :family "Iosevka Proportional Custom" :size 16))
#+end_src

** Theme
#+begin_src emacs-lisp
(setq doom-theme 'catppuccin)
#+end_src

** Transparency
#+begin_src emacs-lisp
(set-frame-parameter nil 'alpha-background 90)

(add-to-list 'default-frame-alist '(alpha-background . 90))
#+end_src

** Line numbers
#+begin_src emacs-lisp
(setq display-line-numbers-type `relative)
#+end_src

** Prevent Emacs client from creating new workspace
#+begin_src emacs-lisp
(after! persp-mode
  (setq persp-emacsclient-init-frame-behaviour-override "main"))
#+end_src

** Fix tabs
#+begin_src emacs-lisp
(after! centaur-tabs
  (setq centaur-tabs-set-bar 'right))
#+end_src

* Org
#+begin_src emacs-lisp
(after! org
  (setq org-directory "~/org/"))
#+end_src

** Latex Preview
#+begin_src emacs-lisp
(use-package! org-latex-preview
  :after org
  :config
  (setq org-startup-with-latex-preview t)
  ;; Increase preview width
  (plist-put! org-latex-preview-appearance-options
              :page-width 0.8
              :zoom 2.0)

  ;; Use dvisvgm to generate previews
  ;; You don't need this, it's the default:
  (setq org-latex-preview-process-default 'dvisvgm)

  ;; Turn on auto-mode, it's built into Org and much faster/more featured than
  ;; org-fragtog. (Remember to turn off/uninstall org-fragtog.)
  (add-hook 'org-mode-hook 'org-latex-preview-auto-mode)

  ;; Enable consistent equation numbering
  (setq org-latex-preview-numbered t)

  ;; Bonus: Turn on live previews.  This shows you a live preview of a LaTeX
  ;; fragment and updates the preview in real-time as you edit it.
  ;; To preview only environments, set it to '(block edit-special) instead
  (setq org-latex-preview-live t)

  ;; More immediate live-previews -- the default delay is 1 second
  (setq org-latex-preview-live-debounce 0.25))
#+end_src

** Latex Headers
*** siunitx
#+begin_src emacs-lisp
(after! org
  (add-to-list 'org-latex-packages-alist '("per-mode=fraction" "siunitx" t)))
#+end_src

*** minted
#+begin_src emacs-lisp
(after! org
  (add-to-list 'org-latex-packages-alist '("" "minted" t))
  (setq org-latex-listings 'minted
        org-latex-pdf-process
        '("latexmk -output-directory=%o %f")))
#+end_src

** Org Roam
*** Org Node
#+begin_src emacs-lisp
(use-package org-node
  :after org
  :init
  (map! :leader
        (:prefix ("n r" . "roam/node")
         :desc "Find node" "f" #'org-node-find
         :desc "Find node" "F" #'org-roam-node-find
         :desc "Insert link" "i" #'org-node-insert-link
         :desc "Link word at point" "w" #'org-node-insert-link-at-word
         :desc "Insert transclusion" "t" #'org-node-insert-transclusion
         :desc "Extract subtree" "e" #'org-node-extract-subtree
         :desc "Rename file by title" "N" #'org-node-rename-file-by-title
         :desc "Random node" "a" #'org-node-visit-random))
  :config
  (setq org-node-extra-id-dirs '("~/org/"))
  (org-node-cache-mode)

  (org-node-complete-at-point-mode)
  (setq org-roam-completion-everywhere nil))

(use-package org-node-fakeroam
  :after org-node
  :config
  (setq org-node-creation-fn #'org-node-fakeroam-new-via-roam-capture)
  (setq org-node-slug-fn #'org-node-fakeroam-slugify-via-roam)
  (org-node-fakeroam-fast-render-mode))
#+end_src

*** Insert link at word
#+begin_src emacs-lisp
(defun select-word-at-point ()
  "Select the word at point."
  (let ((bounds (bounds-of-thing-at-point 'word)))
    (when bounds
      (set-mark (car bounds))
      (goto-char (cdr bounds))
      (activate-mark))))

(defun org-node-insert-link-at-word ()
  "Select the word at point and call org-node-insert-link."
  (interactive)
  (select-word-at-point)
  (org-node-insert-link))

(defun org-roam-insert-link-at-word ()
  "Select the word at point and call org-roam-node-insert."
  (interactive)
  (select-word-at-point)
  (org-roam-node-insert))
#+end_src

*** Capture Templates
Setup Org Roam capture templates.
#+begin_src emacs-lisp
(defun org-roam-template-select-tags ()
  "Prompt and add tags for Org Roam captures"
  (let ((tags (completing-read-multiple "Tag: " (org-roam-tag-completions))))
    (if tags
        (concat "#+filetags: " (org-make-tag-string tags))
      "")))

(after! org-roam
  (setq org-roam-capture-templates
        '(("d" "Default" plain "%?"
           :target (file+head "${slug}.org" "#+title: %(sentence-case-string \"${title}\")\n%(org-roam-template-select-tags)\n")
           :unnarrowed t
           :empty-lines 1)
          ("a" "Anki Card" plain "* %(sentence-case-string \"${title}\")\n%?"
           :target (file+head "${slug}.org" ":PROPERTIES:\n:ANKI_DECK: Main\n:END:\n#+title: %(sentence-case-string \"${title}\")\n%(org-roam-template-select-tags)\n")
           :unnarrowed t
           :empty-lines 1)))

  (setq org-roam-extract-new-file-path "${slug}.org"))
#+end_src

*** Org Roam UI
#+begin_src emacs-lisp
(use-package! websocket
  :after org-roam)

(use-package! org-roam-ui
  :after org-roam
  :bind (:map doom-leader-notes-map
              ("r u" . org-roam-ui-mode))
  :custom
  (org-roam-ui-sync-theme t)
  (org-roam-ui-follow t)
  (org-roam-ui-update-on-save t)
  (org-roam-ui-open-on-start t))
#+end_src

*** Org Roam Export to Publish
#+begin_src emacs-lisp
(defun org-roam-get-files-with-tag (&optional tags)
  "Return a list of org-roam files that contain tags in TAGS.
If no tags are provided, return all files."
  (let ((query (if (null tags)
                   [:select :distinct file
                    :from nodes]
                 [:select :distinct file
                  :from nodes
                  :join tags :on (= id node-id)
                  :where (in tag $v1)])))
    (mapcar #'car (org-roam-db-query query tags))))

(defun org-roam-export (target &optional tags)
  "Copy org-roam files with tags in TAGS to TARGET and generate a new Org Roam database.
If no tags are provided, copy all files."
  (interactive
   (list
    (read-directory-name "Target: ")
    (apply #'vector (completing-read-multiple "Tags: " (org-roam-tag-completions)))))
  (let ((files (org-roam-get-files-with-tag tags))
        (org-roam-directory target)
        (org-roam-db-location (concat target "/org-roam.db")))
    (dolist (file files)
      (copy-file file org-roam-directory t))
    (org-roam-db-sync)))
#+end_src

** Org Agenda
#+begin_src emacs-lisp
(after! org-agenda
 (setq org-agenda-files '("~/org/agenda.org" "~/school/school.org")))
#+end_src

*** Diary
#+begin_src emacs-lisp
(after! org-agenda
  (setq diary-file "~/org/diary")
  (setq org-agenda-include-diary t))
#+end_src

*** Timeblock
#+begin_src emacs-lisp
(use-package! org-timeblock
  :config
  (evil-define-key 'normal org-timeblock-mode-map "q" #'org-timeblock-quit)
  (evil-define-key 'normal org-timeblock-mode-map "l" #'org-timeblock-day-later)
  (evil-define-key 'normal org-timeblock-mode-map "h" #'org-timeblock-day-earlier)
  (evil-define-key 'normal org-timeblock-mode-map "j" #'org-timeblock-jump-to-day)
  (evil-define-key 'normal org-timeblock-mode-map "v" #'org-timeblock-change-span)
  (evil-define-key 'normal org-timeblock-mode-map "s" #'org-timeblock-schedule)
  (evil-define-key 'normal org-timeblock-mode-map "d" #'org-timeblock-set-duration)
  (evil-define-key 'normal org-timeblock-mode-map "m" #'org-timeblock-mark-block)
  (evil-define-key 'normal org-timeblock-mode-map "u" #'org-timeblock-unmark-block)
  (evil-define-key 'normal org-timeblock-mode-map "U" #'org-timeblock-unmark-all-blocks)
  (evil-define-key 'normal org-timeblock-mode-map "+" #'org-timeblock-new-task)
  :custom
  (org-timeblock-show-future-repeats t)
  :bind
  (:map doom-leader-open-map
        ("a b" . org-timeblock)))
#+end_src

*** Org Super Agenda
#+begin_src emacs-lisp
(use-package! org-super-agenda
  :after org-agenda
  :config
  (org-super-agenda-mode)
  (setq org-super-agenda-header-map (make-sparse-keymap))
  (setq org-super-agenda-groups
        '((:name "Overdue"
           :deadline past)
          (:name "Today"
           :time-grid t)
          (:name "Important"
           :priority "A")
          (:name "Tasks"
           :and (:todo t
                 :not (:habit t)))
          (:name "Habits"
           :habit t))))
#+end_src
*** Clock report
#+begin_src emacs-lisp
(after! org-agenda
  (setq org-agenda-start-with-clockreport-mode t)
  (setq org-agenda-clockreport-parameter-plist '(:link t :tags t :fileskip0 t)))
#+end_src

** Org Auto Export
#+begin_src emacs-lisp
(after! org
  (defun org-export-on-save (export-method)
    "Export org when saving current buffer."
    (when (not (eq major-mode 'org-mode))
      (error "Not an org-mode file!"))
    (if (memq export-method after-save-hook)
        (progn (remove-hook 'after-save-hook export-method t)
               (message "Disabled export on save"))
      (add-hook 'after-save-hook export-method nil t)
      (message "Enabled export on save")))

  (defun org-export-pdf-on-save ()
    "Export org to pdf on save"
    (interactive)
    (org-export-on-save (lambda () (org-latex-export-to-pdf t))))

  (defun org-export-html-on-save ()
    "Export org to html on save"
    (interactive)
    (org-export-on-save 'org-html-export-to-html)))
#+end_src

** Smartparens
#+begin_src emacs-lisp
(after! org
  (sp-local-pair 'org-mode "\\[" "\\]"))
#+end_src

** Transclusion
#+begin_src emacs-lisp
(use-package! org-transclusion
  :after org
  :hook
  (org-mode . org-transclusion-mode)
  (org-mode . (lambda () (add-hook! after-save #'org-transclusion-add-all)))
  :init
  (map!
   :map doom-leader-notes-map
   :desc "Org Transclusion Mode" "t" #'org-transclusion-mode)
  :config
  (setq org-transclusion-exclude-elements '(property-drawer keyword))
  (setq org-roam-db-extra-links-exclude-keys
        (remove '(keyword "transclude") org-roam-db-extra-links-exclude-keys)))
#+end_src

** Org Habit
#+begin_src emacs-lisp
(add-to-list 'org-modules 'org-habit)
#+end_src

** Journal
#+begin_src emacs-lisp
(use-package! org-journal
  :init
  (add-hook! org-journal-mode (setq auto-save-default nil))
  (add-hook! org-journal-mode (setq-local undo-tree-auto-save-history nil))
  :config
  (setq org-journal-enable-encryption t)
  (setq org-journal-encrypt-journal t))
#+end_src

** Auto Tangle
#+begin_src emacs-lisp
(use-package org-auto-tangle
  :hook (org-mode . org-auto-tangle-mode))
#+end_src

** Org Capture Templates
#+begin_src emacs-lisp
(after! org
  (add-to-list 'org-capture-templates '("s" "School Todo" entry
                                        (file+headline "~/school/school.org" "Tasks")
                                        "* TODO %? %^G\nDEADLINE: %^{Deadline}t\n%^{EFFORT}p\n%i")))
#+end_src

** Anki-Editor
#+begin_src emacs-lisp
(use-package! anki-editor
  :after org
  :hook (org-mode . (lambda ()
                      (if (ignore-errors (anki-editor-api-check) t)
                          (anki-editor-mode))))
  :config
  (setq anki-editor-swap-two-fields '("Cloze"))
  (map! :map anki-editor-mode-map
        :leader
        :prefix ("n e" . "Anki Editor")
        :desc "Anki editor mode" "e" #'anki-editor-mode
        :desc "Insert note" "i" #'anki-editor-insert-note
        :desc "Push notes" "p" #'anki-editor-push-notes
        :desc "Cloze note" "c" #'anki-editor-cloze-dwim
        :desc "Delete current note" "d" #'anki-editor-delete-note-at-point
        :desc "Browse current note" "b" #'anki-editor-gui-browse
        :desc "Set current note type" "t" #'anki-editor-set-note-type
        :desc "Push new notes" "P" #'anki-editor-push-new-notes))

(defun anki-editor-push-notes-directory (directory)
  (interactive
   (list (read-directory-name "Directory: ")))
  (let* ((files (directory-files-recursively directory "\\.org$"))
         (total (length files))
         (index 0)
         (progress-reporter (make-progress-reporter "Pushing notes..." 0 total)))
    (dolist (file files)
      (with-current-buffer (find-file-noselect file)
        (anki-editor-push-notes 'file file)
        (save-buffer)
        (kill-buffer (current-buffer)))
      (setq index (1+ index))
      (progress-reporter-update progress-reporter index))
    (progress-reporter-done progress-reporter)
    (message "Finished pushing notes")))
#+end_src

** Latex Snippets
#+begin_src emacs-lisp
(after! org
  (add-hook! org-mode (corfu-mode -1))
  (add-hook! org-mode (yas-activate-extra-mode 'latex-mode)))
#+end_src
** Pomodoro
#+begin_src emacs-lisp
(after! org-pomodoro
  (setq org-pomodoro-audio-player (executable-find "mpv")))
#+end_src

** Clock
Use mpv instead of aplay to play mp3
#+begin_src emacs-lisp
(after! org-clock
  (setq org-clock-sound "~/.dotfiles/assets/audio/alarm.mp3")
  (defun org-clock-play-sound-mpv-advice (original-func &optional clock-sound)
    "Advice for `org-clock-play-sound` to use mpv for sound playback."
    (let* ((org-clock-sound (or clock-sound org-clock-sound)))
      (if (stringp org-clock-sound)
          (let ((file (expand-file-name org-clock-sound)))
            (if (and (file-exists-p file)
                     (executable-find "mpv"))
                (start-process "org-clock-play-notification" nil
                               "mpv" file)))
        (funcall original-func clock-sound))))

  (advice-add 'org-clock-play-sound :around #'org-clock-play-sound-mpv-advice))
#+end_src

* Latex
** Latex Compile Flags
Add shell-escape flag
#+begin_src emacs-lisp
(setq TeX-command-extra-options "-shell-escape")
#+end_src

* Writing
** Language Tool
#+begin_src emacs-lisp
(after! langtool
  (setq langtool-default-language "en-GB"))
#+end_src

** Jinx
#+begin_src emacs-lisp
(use-package! jinx
  :hook (emacs-startup . global-jinx-mode)
  :config
  (setq jinx-languages "en_GB-ize")
  (map! :n "z=" #'jinx-correct
        :leader "ts" #'jinx-mode
        :leader "tS" #'jinx-languages))
#+end_src

* Programming
** LSP Mode
*** Inlay Hints
#+begin_src emacs-lisp
(after! lsp-mode
  (setq lsp-inlay-hint-enable t))
#+end_src

*** Current line LSP diagnostic message
#+begin_src emacs-lisp
(setq search-engine-query-url "https://google.com/search?q=")
(defun browse-lsp-current-line-diagnostic-message ()
  "Browse the current line LSP diagonstic message with search-engine-query-url."
  (interactive)
  (browse-url (concat search-engine-query-url (lsp-current-line-diagnostic-message))))

(defun kill-lsp-current-line-diagnostic-message ()
  "Add the current line LSP diagonstic message to the kill ring."
  (interactive)
  (kill-new (lsp-current-line-diagnostic-message)))

(defun lsp-current-line-diagnostic-message ()
  "Return the current line LSP diagonstic message, prompting the user if there are more than one."
  (let* ((lsp-diagnostics (lsp-cur-line-diagnostics))
         (lsp-messages (get-lsp-messages lsp-diagnostics)))
    (unless lsp-messages
      (user-error "No LSP diagnostic messages on this line"))
    (if (length> lsp-messages 1)
        (completing-read "Message: " lsp-messages)
      (car lsp-messages))))

(defun get-lsp-messages (lsp-diagnostics)
  "Return the \"message\" values from LSP-DIAGNOSTICS."
  (mapcar (lambda (lsp-diagnostic) (gethash "message" lsp-diagnostic)) (lsp-cur-line-diagnostics)))

(map! :after lsp-mode
      :map doom-leader-code-map
      "y" #'kill-lsp-current-line-diagnostic-message
      "Y" #'browse-lsp-current-line-diagnostic-message)
#+end_src

*** Basedpyright
#+begin_src emacs-lisp
(setq lsp-pyright-langserver-command "basedpyright")
#+end_src

** Nix
#+begin_src emacs-lisp
(after! nix-mode
  (set-formatter! 'alejandra '("alejandra" "--quiet") :modes '(nix-mode))
  (setq-hook! 'nix-mode-hook +format-with-lsp nil))
#+end_src

** Copilot
#+begin_src emacs-lisp
(use-package! copilot
  :bind (:map copilot-completion-map
              ("<tab>" . 'copilot-accept-completion)
              ("TAB" . 'copilot-accept-completion)
              ("C-TAB" . 'copilot-accept-completion-by-word)
              ("C-<tab>" . 'copilot-accept-completion-by-word)
              ("C-n" . 'copilot-next-completion)
              ("C-p" . 'copilot-previous-completion)
              ("C-o" . 'copilot-panel-complete)))
#+end_src

** Emacs Lisp
#+begin_src emacs-lisp
(defun force-eval-buffer ()
  "Execute the current buffer as Lisp code.
Top-level forms are evaluated with `eval-defun' so that `defvar'
and `defcustom' forms reset their default values."
  (interactive)
  (save-excursion
    (goto-char (point-min))
    (while (not (eobp))
      (forward-sexp)
      (eval-defun nil))))
#+end_src

** Mindustry Logic
#+begin_src emacs-lisp
(use-package! mlog-mode)
#+end_src

** Direnv
#+begin_src emacs-lisp
(add-hook 'after-init-hook 'envrc-global-mode)
#+end_src

** difftastic
#+begin_src emacs-lisp
(use-package! difftastic
  :after magit
  :config
  (difftastic-bindings-mode))
#+end_src
* Editing
** Sentence case
#+begin_src emacs-lisp
(defun sentence-case-string (string)
  "Convert STRING to sentence case."
  (when string
    (let ((s (downcase string)))
      ;; Capitalize first character of the string
      (when (> (length s) 0)
        (setf (substring s 0 1) (upcase (substring s 0 1))))

      ;; Capitalize first letter after each sentence-ending punctuation
      (replace-regexp-in-string "[.!?*:-][ \t\n]+\\(\\w\\)"
                                (lambda (match)
                                  (replace-match (upcase (match-string 1 match))
                                                 t nil match 1))
                                s))))

(defun sentence-case-region (start end)
  "Convert the region from START to END to sentence case.
If no region is active, convert the current line."
  (interactive
   (if (use-region-p)
       (list (region-beginning) (region-end))
     (list (line-beginning-position) (line-end-position))))

  (let* ((text (buffer-substring-no-properties start end))
         (converted (sentence-case-string text)))
    (delete-region start end)
    (insert converted)))

(map! :nv "gC" #'sentence-case-region)
#+end_src

** Sort lines
#+begin_src emacs-lisp
(map! :v "gS" #'sort-lines)
#+end_src
